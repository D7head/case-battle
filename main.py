from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import random
from typing import Dict, List, Set, Tuple

users = {}
banned_users = set()
trades = {}
nicknames = {}
reverse_nicknames = {}

cases = {
    "case1": {
        "name": "–û–±—ã—á–Ω—ã–π –∫–µ–π—Å",
        "price": 100,
        "skins": [
            {"name": "AK-47 | –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è", "rarity": "–û–±—ã—á–Ω—ã–π", "price": 50},
            {"name": "AWP | –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π hive", "rarity": "–û–±—ã—á–Ω—ã–π", "price": 60},
            {"name": "M4A4 | –ó–µ–≤—Å", "rarity": "–û–±—ã—á–Ω—ã–π", "price": 70},
            {"name": "Glock-18 | –í–æ–¥—è–Ω–∏—Å—Ç—ã–π", "rarity": "–û–±—ã—á–Ω—ã–π", "price": 40},
            {"name": "USP-S | –ö—Ä–æ–≤–∞–≤—ã–π —Ç–∏–≥—Ä", "rarity": "–û–±—ã—á–Ω—ã–π", "price": 55},
        ],
    },
    "case2": {
        "name": "–†–µ–¥–∫–∏–π –∫–µ–π—Å",
        "price": 500,
        "skins": [
            {"name": "–ù–æ–∂ | –ë–∞–±–æ—á–∫–∞", "rarity": "–†–µ–¥–∫–∏–π", "price": 1000},
            {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ | –°–ø–µ–∫—Ç—Ä", "rarity": "–†–µ–¥–∫–∏–π", "price": 1200},
            {"name": "AWP | –î—Ä–∞–∫–æ–Ω –õ–æ—Ä", "rarity": "–†–µ–¥–∫–∏–π", "price": 800},
            {"name": "Karambit | –ú—Ä–∞–º–æ—Ä–Ω—ã–π —É–∑–æ—Ä", "rarity": "–†–µ–¥–∫–∏–π", "price": 1500},
            {"name": "M9 Bayonet | –£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç", "rarity": "–†–µ–¥–∫–∏–π", "price": 1300},
        ],
    },
    "case3": {
        "name": "–≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å",
        "price": 1000,
        "skins": [
            {"name": "–ù–æ–∂ | –°–∞–ø—Ñ–∏—Ä", "rarity": "–≠–ø–∏—á–µ—Å–∫–∏–π", "price": 5000},
            {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ | –î—Ä–∞–∫–æ–Ω", "rarity": "–≠–ø–∏—á–µ—Å–∫–∏–π", "price": 6000},
            {"name": "AWP | –ú–µ–¥—É–∑–∞", "rarity": "–≠–ø–∏—á–µ—Å–∫–∏–π", "price": 4000},
            {"name": "Karambit | –õ–æ—Ä–µ", "rarity": "–≠–ø–∏—á–µ—Å–∫–∏–π", "price": 7000},
            {"name": "M9 Bayonet | –†—É–±–∏–Ω", "rarity": "–≠–ø–∏—á–µ—Å–∫–∏–π", "price": 6500},
        ],
    },
    "case4": {
        "name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å",
        "price": 5000,
        "skins": [
            {"name": "–ù–æ–∂ | –£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥—Ä–∞–∫–æ–Ω", "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "price": 10000},
            {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ | –õ—É–Ω–Ω—ã–π —Å–≤–µ—Ç", "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "price": 12000},
            {"name": "AWP | –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥—Ä–∞–∫–æ–Ω", "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "price": 15000},
            {"name": "Karambit | –ó–æ–ª–æ—Ç–æ–π —Ç–∏–≥—Ä", "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "price": 20000},
            {"name": "M9 Bayonet | –ê–ª–º–∞–∑–Ω—ã–π –∫–æ—Ä–æ–ª—å", "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "price": 25000},
        ],
    },
    "case5": {
        "name": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å",
        "price": 9999999,
        "skins": [
            {"name": "–ù–æ–∂ | –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä", "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", "price": 1000000},
            {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ | –ó–≤–µ–∑–¥–Ω–∞—è –ø—ã–ª—å", "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", "price": 1200000},
            {"name": "AWP | –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥—Ä–∞–∫–æ–Ω", "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", "price": 1500000},
            {"name": "Karambit | –ù–µ–±–µ—Å–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞", "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", "price": 2000000},
            {"name": "M9 Bayonet | –í–µ—á–Ω—ã–π –æ–≥–æ–Ω—å", "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", "price": 2500000},
        ],
    },
}

promo_codes = {
    "FREE100": 100,
    "CSGODROP": 500,
    "BIGMONEY": 1000,
    "STEPAN": 99999,
    "LEGENDARY": 5000
}

used_promo_codes = set()
ADMIN_PASSWORD = "vadimka"

WAITING_FOR_BAN = 1
WAITING_FOR_UNBAN = 2
WAITING_FOR_RESET = 3
WAITING_FOR_NICKNAME = 4
WAITING_FOR_TRADE_TARGET = 5
WAITING_FOR_TRADE_AMOUNT = 6
WAITING_FOR_TRADE_SKINS = 7
WAITING_FOR_TRADE_CONFIRMATION = 8
WAITING_FOR_TRANSFER_TARGET = 9
WAITING_FOR_TRANSFER_AMOUNT = 10

main_keyboard = ReplyKeyboardMarkup(
    [["üí∞ –ë–∞–ª–∞–Ω—Å", "üì¶ –ö–µ–π—Å—ã"],
     ["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥"],
     ["üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "üìù –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫"],
     ["üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", "ü§ù –¢—Ä–µ–π–¥"]],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    [["üî® –ó–∞–±–∞–Ω–∏—Ç—å", "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å"],
     ["üí∏ –°–±—Ä–æ—Å–∏—Ç—å –¥–µ–Ω—å–≥–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]],
    resize_keyboard=True
)

def is_banned(user_id: int) -> bool:
    return user_id in banned_users

def resolve_user_identifier(identifier: str):
    try:
        return int(identifier)
    except ValueError:
        return reverse_nicknames.get(identifier.lower())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if is_banned(user_id):
        await update.message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    if user_id not in users:
        users[user_id] = {"balance": 1000, "skins": []}
        default_nick = f"–ò–≥—Ä–æ–∫_{user_id % 1000:03d}"
        nicknames[user_id] = default_nick
        reverse_nicknames[default_nick.lower()] = user_id

    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nicknames[user_id]}!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$\n"
        f"üÜî –í–∞—à ID: {user_id}\n"
        f"üìù –í–∞—à –Ω–∏–∫: {nicknames[user_id]}",
        reply_markup=main_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    if context.user_data.get('waiting_for') == WAITING_FOR_BAN:
        await process_ban(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_UNBAN:
        await process_unban(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_RESET:
        await process_reset(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_NICKNAME:
        await process_nickname_change(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_TRADE_TARGET:
        await process_trade_target(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_TRADE_AMOUNT:
        await process_trade_amount(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_TRADE_SKINS:
        await process_trade_skins(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_TRADE_CONFIRMATION:
        await process_trade_confirmation(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_TRANSFER_TARGET:
        await process_transfer_target(update, context)
        return
    elif context.user_data.get('waiting_for') == WAITING_FOR_TRANSFER_AMOUNT:
        await process_transfer_amount(update, context)
        return

    if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "üì¶ –ö–µ–π—Å—ã":
        await show_cases(update, context)
    elif text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        await inventory(update, context)
    elif text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    elif text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        await show_leaderboard(update, context)
    elif text == "üìù –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫":
        context.user_data['waiting_for'] = WAITING_FOR_NICKNAME
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
    elif text == "üî® –ó–∞–±–∞–Ω–∏—Ç—å":
        context.user_data['waiting_for'] = WAITING_FOR_BAN
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
    elif text == "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å":
        context.user_data['waiting_for'] = WAITING_FOR_UNBAN
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
    elif text == "üí∏ –°–±—Ä–æ—Å–∏—Ç—å –¥–µ–Ω—å–≥–∏":
        context.user_data['waiting_for'] = WAITING_FOR_RESET
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–µ–Ω–µ–≥ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:")
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_admin_stats(update, context)
    elif text == "üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏":
        context.user_data['waiting_for'] = WAITING_FOR_TRANSFER_TARGET
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    elif text == "ü§ù –¢—Ä–µ–π–¥":
        context.user_data['waiting_for'] = WAITING_FOR_TRADE_TARGET
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç—Ä–µ–π–¥–∞:")
    elif text in promo_codes:
        await activate_promo(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=main_keyboard)

async def process_nickname_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    new_nick = update.message.text.strip()

    if not new_nick:
        await update.message.reply_text("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    if len(new_nick) > 20:
        await update.message.reply_text("–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)!")
        return

    if ' ' in new_nick:
        await update.message.reply_text("–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤!")
        return

    if new_nick.lower() in reverse_nicknames and reverse_nicknames[new_nick.lower()] != user_id:
        await update.message.reply_text("–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!")
        return

    if user_id in nicknames:
        old_nick = nicknames[user_id]
        if old_nick.lower() in reverse_nicknames:
            del reverse_nicknames[old_nick.lower()]

    nicknames[user_id] = new_nick
    reverse_nicknames[new_nick.lower()] = user_id

    await update.message.reply_text(
        f"‚úÖ –í–∞—à –Ω–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_nick}",
        reply_markup=main_keyboard
    )
    context.user_data['waiting_for'] = None

async def process_ban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    identifier = update.message.text.strip()
    target_id = resolve_user_identifier(identifier)

    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
    else:
        banned_users.add(target_id)
        target_nick = nicknames.get(target_id, f"ID:{target_id}")
        await update.message.reply_text(
            f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_nick} (ID:{target_id}) –∑–∞–±–∞–Ω–µ–Ω.",
            reply_markup=admin_keyboard
        )

    context.user_data['waiting_for'] = None

async def process_unban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    identifier = update.message.text.strip()
    target_id = resolve_user_identifier(identifier)

    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
    else:
        banned_users.discard(target_id)
        target_nick = nicknames.get(target_id, f"ID:{target_id}")
        await update.message.reply_text(
            f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_nick} (ID:{target_id}) —Ä–∞–∑–±–∞–Ω–µ–Ω.",
            reply_markup=admin_keyboard
        )

    context.user_data['waiting_for'] = None

async def process_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    identifier = update.message.text.strip()
    target_id = resolve_user_identifier(identifier)

    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
    elif target_id not in users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
    else:
        users[target_id]["balance"] = 0
        users[target_id]["skins"] = []
        target_nick = nicknames.get(target_id, f"ID:{target_id}")
        await update.message.reply_text(
            f"üí∏ –î–µ–Ω—å–≥–∏ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_nick} (ID:{target_id}) —Å–±—Ä–æ—à–µ–Ω—ã.",
            reply_markup=admin_keyboard
        )

    context.user_data['waiting_for'] = None

async def process_transfer_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    identifier = update.message.text.strip()
    target_id = resolve_user_identifier(identifier)
    user_id = update.message.from_user.id

    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
        context.user_data['waiting_for'] = None
        return

    if target_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
        context.user_data['waiting_for'] = None
        return

    context.user_data['transfer_target'] = target_id
    context.user_data['waiting_for'] = WAITING_FOR_TRANSFER_AMOUNT
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

async def process_transfer_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    target_id = context.user_data['transfer_target']

    try:
        amount = int(update.message.text.strip())
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        if users[user_id]["balance"] < amount:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            return

        users[user_id]["balance"] -= amount
        users[target_id]["balance"] += amount

        target_nick = nicknames.get(target_id, f"ID:{target_id}")
        await update.message.reply_text(
            f"‚úÖ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_nick}\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$",
            reply_markup=main_keyboard
        )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
    finally:
        context.user_data['waiting_for'] = None
        context.user_data.pop('transfer_target', None)

async def process_trade_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    identifier = update.message.text.strip()
    target_id = resolve_user_identifier(identifier)
    user_id = update.message.from_user.id

    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
        context.user_data['waiting_for'] = None
        return

    if target_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–π–¥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        context.user_data['waiting_for'] = None
        return

    if target_id not in users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        context.user_data['waiting_for'] = None
        return

    context.user_data['trade_target'] = target_id
    context.user_data['trade_skins'] = []
    context.user_data['waiting_for'] = WAITING_FOR_TRADE_AMOUNT
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å (–∏–ª–∏ 0 –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∫–∏–Ω—ã):")

async def process_trade_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    try:
        amount = int(update.message.text.strip())
        if amount < 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
            return

        if users[user_id]["balance"] < amount:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–µ–π–¥–∞!")
            return

        context.user_data['trade_amount'] = amount
        context.user_data['waiting_for'] = WAITING_FOR_TRADE_SKINS

        if users[user_id]["skins"]:
            skins_list = "\n".join(
                f"{i + 1}. {skin['name']} ({skin['rarity']}) - üíµ {skin['price']}$"
                for i, skin in enumerate(users[user_id]["skins"])
            )
            await update.message.reply_text(
                f"üìã –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_list}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å (–∏–ª–∏ 0 –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∏):"
            )
        else:
            context.user_data['trade_skins'] = []
            await process_trade_skins(update, context)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

async def process_trade_skins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if text == "0":
        context.user_data['trade_skins'] = []
    else:
        try:
            skin_indices = [int(i) - 1 for i in text.split()]
            valid_skins = []

            for index in skin_indices:
                if 0 <= index < len(users[user_id]["skins"]):
                    valid_skins.append(users[user_id]["skins"][index])
                else:
                    await update.message.reply_text(f"‚ùå –°–∫–∏–Ω —Å –Ω–æ–º–µ—Ä–æ–º {index + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return

            context.user_data['trade_skins'] = valid_skins
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–∏–Ω–æ–≤ –≤ –≤–∏–¥–µ —á–∏—Å–µ–ª!")
            return

    target_id = context.user_data['trade_target']
    target_nick = nicknames.get(target_id, f"ID:{target_id}")
    amount = context.user_data.get('trade_amount', 0)
    skins = context.user_data.get('trade_skins', [])

    trade_id = f"{user_id}_{target_id}_{random.randint(1000, 9999)}"

    trades[trade_id] = {
        "from_user": user_id,
        "to_user": target_id,
        "amount": amount,
        "skins": skins,
        "status": "pending"
    }

    trade_text = f"ü§ù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {target_nick}:\n\n"
    trade_text += f"üí∏ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {amount}$\n"

    if skins:
        trade_text += "üî´ –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n"
        trade_text += "\n".join(f"- {skin['name']} ({skin['rarity']})" for skin in skins)
    else:
        trade_text += "üî´ –°–∫–∏–Ω—ã –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã\n"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"trade_accept_{trade_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"trade_decline_{trade_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        trade_text,
        reply_markup=reply_markup
    )

    try:
        from_nick = nicknames.get(user_id, f"ID:{user_id}")
        await context.bot.send_message(
            chat_id=target_id,
            text=f"ü§ù –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –æ—Ç {from_nick}:\n\n{trade_text}",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–π–¥–µ: {e}")

    context.user_data['waiting_for'] = None

async def process_trade_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("trade_accept_"):
        trade_id = data.split("_")[2]
        await accept_trade(update, context, trade_id)
    elif data.startswith("trade_decline_"):
        trade_id = data.split("_")[2]
        await decline_trade(update, context, trade_id)

async def accept_trade(update: Update, context: ContextTypes.DEFAULT_TYPE, trade_id: str) -> None:
    if trade_id not in trades:
        await update.callback_query.edit_message_text("‚ùå –¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return

    trade = trades[trade_id]
    from_user = trade["from_user"]
    to_user = trade["to_user"]
    amount = trade["amount"]
    skins = trade["skins"]

    if users[from_user]["balance"] < amount:
        await update.callback_query.edit_message_text("‚ùå –£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        del trades[trade_id]
        return

    for skin in skins:
        if skin not in users[from_user]["skins"]:
            await update.callback_query.edit_message_text("‚ùå –£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∫–∏–Ω–æ–≤")
            del trades[trade_id]
            return

    try:
        users[from_user]["balance"] -= amount
        users[to_user]["balance"] += amount

        for skin in skins:
            users[from_user]["skins"].remove(skin)
            users[to_user]["skins"].append(skin)

        trades[trade_id]["status"] = "accepted"

        from_nick = nicknames.get(from_user, f"ID:{from_user}")
        to_nick = nicknames.get(to_user, f"ID:{to_user}")

        await context.bot.send_message(
            chat_id=from_user,
            text=f"‚úÖ {to_nick} –ø—Ä–∏–Ω—è–ª –≤–∞—à —Ç—Ä–µ–π–¥!\n"
                 f"üí∏ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {amount}$\n"
                 f"üî´ –ü–µ—Ä–µ–¥–∞–Ω–æ —Å–∫–∏–Ω–æ–≤: {len(skins)}\n"
                 f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[from_user]['balance']}$"
        )

        await update.callback_query.edit_message_text(
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç—Ä–µ–π–¥ –æ—Ç {from_nick}!\n"
            f"üí∏ –ü–æ–ª—É—á–µ–Ω–æ: {amount}$\n"
            f"üî´ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–∏–Ω–æ–≤: {len(skins)}\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[to_user]['balance']}$"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–∞")
    finally:
        if trade_id in trades:
            del trades[trade_id]

async def decline_trade(update: Update, context: ContextTypes.DEFAULT_TYPE, trade_id: str) -> None:
    if trade_id not in trades:
        await update.callback_query.edit_message_text("‚ùå –¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return

    trade = trades[trade_id]
    from_user = trade["from_user"]
    to_user = update.callback_query.from_user.id

    trades[trade_id]["status"] = "declined"

    from_nick = nicknames.get(from_user, f"ID:{from_user}")
    to_nick = nicknames.get(to_user, f"ID:{to_user}")

    await context.bot.send_message(
        chat_id=from_user,
        text=f"‚ùå {to_nick} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à —Ç—Ä–µ–π–¥"
    )

    await update.callback_query.edit_message_text(
        f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ç—Ä–µ–π–¥ –æ—Ç {from_nick}"
    )

    del trades[trade_id]

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    await update.message.reply_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$",
        reply_markup=main_keyboard
    )

async def show_cases(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    keyboard = [
        [InlineKeyboardButton(f"{case['name']} - {case['price']}$", callback_data=case_id)]
        for case_id, case in cases.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:", reply_markup=reply_markup)

async def case_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    case_id = query.data
    if case_id not in cases:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    case = cases[case_id]
    if users[user_id]["balance"] >= case["price"]:
        users[user_id]["balance"] -= case["price"]
        skin = random.choice(case["skins"])
        users[user_id]["skins"].append(skin)
        await query.edit_message_text(
            f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ {case['name']} –∏ –ø–æ–ª—É—á–∏–ª–∏:\n"
            f"üî´ {skin['name']} ({skin['rarity']})\n"
            f"üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {skin['price']}$\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$"
        )
    else:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞.")

async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    if not users[user_id]["skins"]:
        await update.message.reply_text("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return

    skins_list = "\n".join(
        f"{i + 1}. {skin['name']} ({skin['rarity']}) - üíµ {skin['price']}$"
        for i, skin in enumerate(users[user_id]["skins"])
    )

    await update.message.reply_text(
        f"üéí –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_list}\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω, –≤–≤–µ–¥–∏—Ç–µ /sell [–Ω–æ–º–µ—Ä]",
        reply_markup=main_keyboard
    )

async def sell_skin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell [–Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞]")
        return

    try:
        skin_index = int(context.args[0]) - 1
        if 0 <= skin_index < len(users[user_id]["skins"]):
            skin = users[user_id]["skins"].pop(skin_index)
            users[user_id]["balance"] += skin["price"]
            await update.message.reply_text(
                f"‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ {skin['name']} –∑–∞ {skin['price']}$.\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$",
                reply_markup=main_keyboard
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def activate_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    promo_code = update.message.text.upper()

    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    if promo_code in used_promo_codes:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
        return

    if promo_code in promo_codes:
        reward = promo_codes[promo_code]
        users[user_id]["balance"] += reward
        used_promo_codes.add(promo_code)
        await update.message.reply_text(
            f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward}$\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}$",
            reply_markup=main_keyboard
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤.")
        return

    sorted_users = sorted(users.items(), key=lambda x: x[1]["balance"], reverse=True)

    leaderboard_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:10], 1):
        nick = nicknames.get(user_id, f"ID:{user_id}")
        leaderboard_text += f"{i}. {nick} - üí∞ {data['balance']}$\n"

    await update.message.reply_text(leaderboard_text, reply_markup=main_keyboard)

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not users:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
        return

    total_players = len(users)
    total_skins = sum(len(user["skins"]) for user in users.values())
    total_balance = sum(user["balance"] for user in users.values())

    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {total_players}\n"
        f"üéí –í—Å–µ–≥–æ —Å–∫–∏–Ω–æ–≤: {total_skins}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}$\n"
        f"üî® –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}\n"
        f"ü§ù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {len(trades)}"
    )

    await update.message.reply_text(stats_text, reply_markup=admin_keyboard)

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args and context.args[0] == ADMIN_PASSWORD:
        user_id = update.message.from_user.id
        if user_id not in users:
            users[user_id] = {"balance": float("inf"), "skins": []}
            nicknames[user_id] = f"–ê–¥–º–∏–Ω_{user_id % 1000:03d}"
            reverse_nicknames[nicknames[user_id].lower()] = user_id
        else:
            users[user_id]["balance"] = float("inf")

        await update.message.reply_text(
            "üîë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "üí∞ –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏.",
            reply_markup=admin_keyboard
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

def main() -> None:
    application = Application.builder().token("8165670310:AAGeisjMnyf-BHwJxibiJvBHjoOXPOtK9jc").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("sell", sell_skin))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.add_handler(CallbackQueryHandler(case_selected))
    application.add_handler(CallbackQueryHandler(process_trade_confirmation, pattern="^trade_(accept|decline)_"))

    application.run_polling()

if __name__ == "__main__":
    main()
